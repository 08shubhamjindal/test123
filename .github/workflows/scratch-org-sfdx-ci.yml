# Unique name for this workflow
name: Salesforce DX CI (scratch org only)

# Definition when the workflow should run
on:
    pull_request:
        types: [opened, synchronize, reopened]

# Jobs to be executed
jobs:
    formatting-and-linting:
        runs-on: ubuntu-latest
        steps:
            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v1

            # Cache node_modules to speed up the process
            - name: Restore node_modules cache
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm install

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify

            # ESlint
            - name: 'Lint Lightning Web Components'
              run: npm run lint:lwc

            # Unit tests
            - name: 'Unit test Lightning Web Components'
              run: npm run test:unit:coverage

    scratch-org-test:
        runs-on: ubuntu-latest
        needs: formatting-and-linting
        steps:
            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v1

            # Install salesforcedx pre-release plugin
            - name: 'Install salesforcedx pre-release plugin'
              uses: forcedotcom/salesforcedx-actions@master
              if: startsWith(github.head_ref, 'prerelease')
              with:
                  args: 'plugins:install salesforcedx@pre-release'

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:auth:sfdxurl:store --sfdxurlfile=./DEVHUB_SFDX_URL.txt --setalias=devhub --setdefaultdevhubusername'

            # Lint Aura components
            - name: 'Lint Aura components'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:lightning:lint force-app/main/default/aura --exit'

            # Create scratch org
            - name: 'Create scratch org'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1'

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:source:push -u scratch-org'

            # Assign permissionset
            - name: 'Assign permissionset to default user'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:user:permset:assign -n recipes'

            # Import sample data
            - name: 'Import sample data'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:data:tree:import --plan ./data/data-plan.json'

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:apex:test:run --codecoverage --resultformat=tap'

            # Housekeeping
            - name: 'Delete scratch org'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:org:delete -p -u scratch-org'

    packaging:
        runs-on: ubuntu-latest
        needs: scratch-org-test
        steps:
            # Checkout the code in the pull request
            - name: 'Checkout source code'
              uses: actions/checkout@v1

            # Install salesforcedx pre-release plugin
            - name: 'Install salesforcedx pre-release plugin'
              uses: forcedotcom/salesforcedx-actions@master
              if: startsWith(github.head_ref, 'prerelease')
              with:
                  args: 'plugins:install salesforcedx@pre-release'

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt'

            # Store secret for package target org installation
            - name: 'Populate auth file with PACKAGING_SFDX_URL secret'
              shell: bash
              run: 'echo ${{ secrets.PACKAGING_SFDX_URL}} > ./PACKAGING_SFDX_URL.txt'

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:auth:sfdxurl:store --sfdxurlfile=./DEVHUB_SFDX_URL.txt --setalias=devhub --setdefaultdevhubusername'

            # Authenticate package target org
            - name: 'Authenticate package target org'
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:auth:sfdxurl:store --sfdxurlfile=./PACKAGING_SFDX_URL.txt --setalias=packagingorg --setdefaultusername'

            # Create package version
            - name: 'Create package version'
              id: package-version
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:package:version:create -p LWCRecipes -x -w 10 --json'

            # Test if package version creation was successful, otherwise fail the workflow
            - name: 'Test package version creation status'
              if: steps.package-version.outputs.result.status != 1
              run: |
                  echo ${{ steps.package-version.outputs.result }}
                  exit 1

            # Wait for package version replication
            - name: 'Wait'
              uses: maddox/actions/sleep@master
              with:
                  args: 300

            # Run package test installation
            - name: 'Install new package version into test environment'
              id: package-installation
              uses: forcedotcom/salesforcedx-actions@master
              with:
                  args: 'force:package:install --package ${{ steps.package-version.outputs.result.result.SubscriberPackageVersionId }} -w 10 -u packagingorg -r'

            # Test if package version installation was successful, otherwise fail the workflow
            - name: 'Test package version installation status'
              if: steps.package-installation.outputs.result.status != 1
              run: exit 1
